fn sum_n(i: f64, n: f64) -> f64 {
    return ∑ j n { i * n + j + 1 }
}

fn results(mut threads: [f64]) -> res[f64] {
    return ok(∑ _ len(threads) {
        join(thread: pop(mut threads))?
    })
}

fn main() {
    n := 100

    t := 2
    threads := sift i t { go sum_n(i, n / t) }
    println(unwrap(results(mut threads)))
}
