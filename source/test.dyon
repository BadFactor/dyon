/*
fn sum_n(i: f64, n: f64) -> f64 {
    return âˆ‘ j n { i * n + j + 1 }
}

fn results(mut threads: [thr[f64]]) -> res[f64] {
    return ok(âˆ‘ _ len(threads) {
        join(thread: pop(mut threads))?
    })
}

fn main() {
    n := 100

    t := 2
    threads := sift i t { go sum_n(i, n / t) }
    println(unwrap(results(mut threads)))

    join(thread: go sum_n(0, 100))

    // println(sum_n(0, n))
    // println("hi")
}
*/

fn foo() -> f64 {
    3 + 4
    return 7
}

fn main() {
    println(foo())
}
