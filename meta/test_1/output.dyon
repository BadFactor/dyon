fn __pos__data_index_name(data: [[]], index: f64, name: opt[str]) -> res {
    S := index
    I := index
    if name != none() {
        node := start_node(data: data, index: I, name: unwrap(name))
        if node == none() { return err("Expected `" + unwrap(name) + "`")? }
        I += unwrap(node)
    }
    _x := none()
    _y := none()
    _z := none()
    loop {
        if I >= len(data) { break }
        if (_x != none()) &&
           (_y != none()) &&
           (_z != none()) { break }
        i_x := read_f64(data: data, index: I, name: "x")
        if i_x != none() {
            i_x := unwrap(i_x)
            if i_x[0] > 0 {
                I += i_x[0]
                _x = some(i_x[1])
                continue
            }
        }
        i_y := read_f64(data: data, index: I, name: "y")
        if i_y != none() {
            i_y := unwrap(i_y)
            if i_y[0] > 0 {
                I += i_y[0]
                _y = some(i_y[1])
                continue
            }
        }
        i_z := read_f64(data: data, index: I, name: "z")
        if i_z != none() {
            i_z := unwrap(i_z)
            if i_z[0] > 0 {
                I += i_z[0]
                _z = some(i_z[1])
                continue
            }
        }
        if name != none() {
            I += ignore(data: data, index: I)
        }
        break
    }
    if name != none() {
        I += end_node(data: data, index: I, name: unwrap(name))?
    }
    x := if _x != none() {
        unwrap(_x)
    } else {
        return err("Could not find `x`")?
    }
    y := if _y != none() {
        unwrap(_y)
    } else {
        return err("Could not find `y`")?
    }
    z := _z
    return ok([I - S, (x, y, if z == none() { 0 } else { unwrap(z) })])
}

fn __doc__data_index_name(data: [[]], index: f64, name: opt[str]) -> res {
    S := index
    I := index
    if name != none() {
        node := start_node(data: data, index: I, name: unwrap(name))
        if node == none() { return err("Expected `" + unwrap(name) + "`")? }
        I += unwrap(node)
    }
    arr := []
    loop {
        _pos := __pos(data: data, index: I, name: some("pos"))
        if is_err(_pos) {
            break
        } else {
            i_pos := unwrap(_pos)
            I += i_pos[0]
            push(mut arr, i_pos[1])
        }
    }
    if name != none() {
        I += end_node(data: data, index: I, name: unwrap(name))?
    }
    return ok([I - S, arr])
}

fn convert(data) -> res {
    I := 0
    r := __doc(data: data, index: I, name: none())?
    return ok(r[1])
}

