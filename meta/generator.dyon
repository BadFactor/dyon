
fn to_code(syntax: [[]]) -> res[str] {
    code := link {}
    i := 0

    i += start_node(data: syntax, index: i, name: "rules")?

    loop {
        decl := start_node(data: syntax, index: i, name: "decl")
        if decl == none() { break }
        i += unwrap(decl)

        i_name := read_str(data: syntax, index: i, name: "name")?
        i += i_name[0]
        name := i_name[1]
        code += link {
            "fn __"name"_data_index_name(data: [[]], index: f64, name: opt[str]) -> res {\n"
        }
        i += start_node(data: syntax, index: i, name: "rule")?

        code += link {
            "    start := index\n"
            "    i := index\n"
            "    if name != none() {\n"
            "        node := start_node(data: data, index: i, name: unwrap(name))\n"
            "        if node == none() { return err(\"Expected `\" + unwrap(name) + \"`\")? }\n"
            "        i += unwrap(node)\n"
            "    }\n"
        }

        fields := start_node(data: syntax, index: i, name: "fields")
        if fields != none() {
            i += unwrap(fields)
            gen_fields := []
            loop {
                field := start_node(data: syntax, index: i, name: "field")
                if field == none() { break }
                i += unwrap(field)

                i_name := read_str(data: syntax, index: i, name: "name")?
                i += i_name[0]

                i_ty := read_type(data: syntax, index: i)
                ty := if i_ty != none() {
                    i_ty := unwrap(i_ty)
                    i += i_ty[0]
                    some(i_ty[1])
                } else {
                    none()
                }

                i_rule := read_str(data: syntax, index: i, name: "rule")
                rule :=
                    if i_rule != none() {
                        i_rule := unwrap(i_rule)
                        i += i_rule[0]
                        some(i_rule[1])
                    } else { none() }

                i_as := read_str(data: syntax, index: i, name: "as")
                as :=
                    if i_as != none() {
                        i_as := unwrap(i_as)
                        i += i_as[0]
                        some(i_as[1])
                    } else { none() }

                push(mut gen_fields, [i_name[1], ty, rule, as])

                i += end_node(data: syntax, index: i, name: "field")?
            }
            for i len(gen_fields) {
                code += link {"    _"gen_fields[i][0]" := none()\n"}
            }
            code += link {
                "    loop {\n"
                "        if i >= len(data) { return err(\"Unexpected end\")? }\n"
                "        if "
            }
            for i len(gen_fields) {
                code += link {"(_"gen_fields[i][0]" != none())"}
                if (i + 1) != len(gen_fields) {
                    code += link {" &&\n           "}
                }
            }
            code += link{" { break }\n"}
            for i len(gen_fields) {
                name := gen_fields[i][0]
                ty := gen_fields[i][1]
                rule := gen_fields[i][2]
                as := gen_fields[i][3]
                code += link {"        i_" + name + " := "}
                if rule != none() {
                    code += link {"__"unwrap(rule)"(data: data, index: i, name: "}
                    if as != none() {
                        code += link {"some(\""unwrap(as)"\"))\n"}
                    } else {
                        code += link {"none())\n"}
                    }
                } else {
                    code += link {"read_"unwrap(ty)
                        "(data: data, index: i, name: \""name"\")\n"}
                }
                if rule != none() {
                    code += link {"        if !is_err(i_"name") {\n"}
                } else {
                    code += link {"        if i_"name" != none() {\n"}
                }
                code += link {
                    "            i_"name" := unwrap(i_"name")\n"
                    "            i += i_"name"[0]\n"
                    "            _"name" = some(i_"name"[1])\n"
                    "            continue\n"
                    "        }\n"
                }
            }
            code += link {
                "        i += ignore(data: data, index: i)\n"
                "        break\n"
                "    }\n"
                "    if name != none() {\n"
                "        i += end_node(data: data, index: i, name: unwrap(name))?\n"
                "    }\n"
            }
            for i len(gen_fields) {
                name := gen_fields[i][0]
                code += link {
                    "    "name" := if _"name" != none() {\n"
                    "        unwrap(_"name")\n"
                    "    } else {\n"
                    "        return err(\"Could find `"name"`\")?\n"
                    "    }\n"
                }
            }
            i += start_node(data: syntax, index: i, name: "expr")?
            expr := read_str(data: syntax, index: i, name: "code")?
            i += expr[0]
            code += link {"    return ok([i - start, "expr[1]"])\n"}

            i += end_node(data: syntax, index: i, name: "expr")?
            i += end_node(data: syntax, index: i, name: "fields")?
        }

        repeat := start_node(data: syntax, index: i, name: "repeat")
        if repeat != none() {
            i += unwrap(repeat)
            i_rule := read_str(data: syntax, index: i, name: "rule")?
            i += i_rule[0]
            rule := i_rule[1]

            as := read_str(data: syntax, index: i, name: "as")

            code += link {
                "    arr := []\n"
                "    loop {\n"
            }
            if as == none() {
                name := rule

                code += link {
                    "        _"name" := __"rule"(data: data, index: i, name: none())\n"
                    "        if is_err(_"name") {\n"
                    "            break\n"
                    "        } else {\n"
                    "            i_"name" := unwrap(_"name")\n"
                    "            i += i_"name"[0]\n"
                    "            push(mut arr, i_"name"[1])\n"
                    "        }\n"
                }
            } else {
                i_as := unwrap(as)
                i += i_as[0]
                name := i_as[1]

                code += link {
                    "        _"name" := __"rule"(data: data, index: i, name: some(\""name"\"))\n"
                    "        if is_err(_"name") {\n"
                    "            break\n"
                    "        } else {\n"
                    "            i_"name" := unwrap(_"name")\n"
                    "            i += i_"name"[0]\n"
                    "            push(mut arr, i_"name"[1])\n"
                    "        }\n"
                }
            }
            code += link {
                "    }\n"
                "    if name != none() {\n"
                "        i += end_node(data: data, index: i, name: unwrap(name))?\n"
                "    }\n"
                "    return ok([i - start, arr])\n"
            }

            i += end_node(data: syntax, index: i, name: "repeat")?
        }

        select := start_node(data: syntax, index: i, name: "select")
        if select != none() {
            i += unwrap(select)

            rules := []
            loop {
                ref := start_node(data: syntax, index: i, name: "ref")
                if ref == none() { break }
                i += unwrap(ref)

                i_rule := read_str(data: syntax, index: i, name:"rule")?
                i += i_rule[0]
                rule := i_rule[1]
                push(mut rules, rule)

                as := read_str(data: syntax, index: i, name: "as")
                if as != none() {
                    i_as := unwrap(as)
                    i += i_as[0]
                    as := i_as[1]

                    code += link {"    _"rule" := __"rule
                            "(data: data, index: i, name: some(\"" + as + "\"))\n"}
                } else {
                    code += link {
                        "    _"rule" := __"rule"(data: data, index: i, name: none())\n"
                    }
                }
                code += link {
                    "    if is_ok(_"rule") {\n"
                    "        i_"rule" := unwrap(_"rule")\n"
                    "        i += i_"rule"[0]\n"
                    "        if name != none() {\n"
                    "            i += end_node(data: data, index: i, name: unwrap(name))?\n"
                    "        }\n"
                    "        return ok([i - start, i_"rule"[1]])\n"
                    "    }\n"
                }

                i += end_node(data: syntax, index: i, name: "ref")?
            }

            code += link {"    return err(\"Expected one of "}
            for i {
                code += link {"`"rules[i]"`"}
                if (i + 1) < len(rules) {
                    code += link {", "}
                }
            }
            code += link {"\")?\n"}

            i += end_node(data: syntax, index: i, name: "select")?
        }

        code += link {"}\n\n"}
        i += end_node(data: syntax, index: i, name: "rule")?
        i += end_node(data: syntax, index: i, name: "decl")?
    }

    i += end_node(data: syntax, index: i, name: "rules")?

    i_start := read_str(data: syntax, index: i, name: "start")?
    i += i_start[0]

    code += link {
        "fn convert(data) -> res {\n"
        "    i := 0\n"
        "    r := __"i_start[1]"(data: data, index: i, name: none())?\n"
        "    return ok(r[1])\n"
        "}\n\n"
    }

    return ok(code)
}

fn read_type_data_index(data: [[]], index: f64) -> opt[[]] {
    tbool := read_bool(data: data, index: index, name: "bool")
    if tbool != none() { return some([1, "bool"]) }
    tf64 := read_bool(data: data, index: index, name: "f64")
    if tf64 != none() { return some([1, "f64"]) }
    tstr := read_bool(data: data, index: index, name: "str")
    if tstr != none() { return some([1, "str"]) }
    return none()
}

fn read_f64_data_index_name(data: [[]], index: f64, name: str) -> opt[[]] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "f64") && (data[index][3] == name) {
        some([1, data[index][4]])
    } else {
        none()
    }
}

fn read_bool_data_index_name(data: [[]], index: f64, name: str) -> opt[[]] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "bool") && (data[index][3] == name) {
        some([1, data[index][4]])
    } else {
        none()
    }
}

fn read_str_data_index_name(data: [[]], index: f64, name: str) -> opt[[]] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "str") && (data[index][3] == name) {
        some([1, data[index][4]])
    } else {
        none()
    }
}

fn start_node_data_index_name(data: [[]], index: f64, name: str) -> opt[f64] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "start") && (data[index][3] == name) {
        some(1)
    } else {
        none()
    }
}

fn end_node_data_index_name(data: [[]], index: f64, name: str) -> opt[f64] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "end") && (data[index][3] == name) {
        some(1)
    } else {
        none()
    }
}

fn ignore_data_index(data: [[]], index: f64) -> f64 {
    level := 0
    i := index
    for i [index, len(data)) {
        if data[i][2] == "start" {
            level += 1
        } else if data[i][2] == "end" {
            if level == 0 { return i - index }
            level -= 1
        }
    }
    return len(data) - index
}
